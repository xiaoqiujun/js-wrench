{"version":3,"sources":["webpack://jsWrench/webpack/universalModuleDefinition","webpack://jsWrench/./dist/modules/init.js","webpack://jsWrench/./dist/modules/isArray.js","webpack://jsWrench/./dist/modules/isObj.js","webpack://jsWrench/./dist/modules/check.js","webpack://jsWrench/./dist/modules/getBrowserType.js","webpack://jsWrench/./dist/modules/typeOf.js","webpack://jsWrench/./dist/modules/isPrimitive.js","webpack://jsWrench/./dist/modules/has.js","webpack://jsWrench/./dist/modules/isString.js","webpack://jsWrench/./dist/modules/toKeys.js","webpack://jsWrench/./dist/modules/indexOf.js","webpack://jsWrench/./dist/modules/includes.js","webpack://jsWrench/./dist/modules/isAndroid.js","webpack://jsWrench/./dist/modules/isBool.js","webpack://jsWrench/./dist/modules/isDate.js","webpack://jsWrench/./dist/modules/isFn.js","webpack://jsWrench/./dist/modules/isIOS.js","webpack://jsWrench/./dist/modules/isiPad.js","webpack://jsWrench/./dist/modules/isMap.js","webpack://jsWrench/./dist/modules/isNull.js","webpack://jsWrench/./dist/modules/isNumber.js","webpack://jsWrench/./dist/modules/isPromise.js","webpack://jsWrench/./dist/modules/isSet.js","webpack://jsWrench/./dist/modules/isSymbol.js","webpack://jsWrench/./dist/modules/isUndefined.js","webpack://jsWrench/./dist/modules/isWPhone.js","webpack://jsWrench/./dist/modules/ltrim.js","webpack://jsWrench/./dist/modules/rtrim.js","webpack://jsWrench/./dist/modules/trim.js","webpack://jsWrench/./dist/modules/random.js","webpack://jsWrench/./dist/modules/toLowerCase.js","webpack://jsWrench/./dist/modules/toUpperCase.js","webpack://jsWrench/./dist/modules/isPC.js","webpack://jsWrench/./dist/modules/isNaN.js","webpack://jsWrench/./dist/modules/toParam.js","webpack://jsWrench/./dist/modules/empty.js","webpack://jsWrench/./dist/modules/format.js","webpack://jsWrench/./dist/modules/unique.js","webpack://jsWrench/webpack/bootstrap","webpack://jsWrench/webpack/startup","webpack://jsWrench/webpack/runtime/define property getters","webpack://jsWrench/webpack/runtime/hasOwnProperty shorthand","webpack://jsWrench/webpack/runtime/make namespace object"],"names":["root","factory","exports","module","define","amd","this","arrayProto","Array","prototype","objProto","Object","toString","push","pop","slice","splice","hasOwnProperty","v","constructor","CheckRegExp","$instance","mobile","test","telephone","password","qq","IDcard","postal","url","IPv4","number","en","cn","html","email","username","getInstance","types","userAgentInfo","navigator","userAgent","isOpera","indexOf","isIE","isIE11","isEdge","isFireFox","isSafari","isChrome","RegExp","version","parseFloat","t","typeOf","obj","isPrimitive","isObj","keys","key","data","ele","fromIndex","isArray","isString","len","length","index","i","Math","max","abs","toKeys","sum","has","isFn","then","str","replace","lower","upper","floor","random","_ascii","_arr","split","_max","charCodeAt","_min","String","fromCharCode","join","Agents","flag","isNaN","Number","param","forEach","isNull","isUndefined","Format","date","format","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","money","radix","newStr","digits","uniqueToSttring","trim","arr","filter","Boolean","newArr","newObjArr","item","includes","concat","uniqueToSizzArray","isNumber","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","d","definition","o","defineProperty","enumerable","get","prop","call","r","Symbol","toStringTag","value"],"mappings":"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","file":"js-wrench.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jsWrench\"] = factory();\n\telse\n\t\troot[\"jsWrench\"] = factory();\n})(this, function() {\nreturn ","export const arrayProto = Array.prototype;\r\nexport const objProto = Object.prototype;\r\nexport const push = arrayProto.push;\r\nexport const pop = arrayProto.pop;\r\nexport const slice = arrayProto.slice;\r\nexport const splice = arrayProto.splice;\r\nexport const toString = objProto.toString;\r\nexport const hasOwnProperty = objProto.hasOwnProperty;\r\n","import { toString } from './init';\r\n/**\r\n * @description 判断是否数组\r\n *\r\n * @param {*} v 任意值\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example isArray([]) => true\r\n */\r\nconst isArray = (v) => {\r\n    return v.constructor === Array && toString.call(v) === '[object Array]';\r\n};\r\nexport default isArray;\r\n","import { toString } from './init';\r\n/**\r\n * @description 判断是否Object\r\n *\r\n * @param {*} v 任意值\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example isObj({}) => true\r\n */\r\nconst isObj = (v) => {\r\n    return toString.call(v) === '[object Object]';\r\n};\r\nexport default isObj;\r\n","/**\r\n * @description 正则验证 使用单例\r\n *\r\n * @class CheckRegExp\r\n */\r\nclass CheckRegExp {\r\n    constructor() { }\r\n    /**\r\n     * @description 获取实例\r\n     *\r\n     * @static\r\n     * @return {*}\r\n     * @memberof CheckRegExp\r\n     */\r\n    static getInstance() {\r\n        if (!this.$instance)\r\n            this.$instance = new CheckRegExp();\r\n        return this.$instance;\r\n    }\r\n    /**\r\n     *\r\n     * @description 匹配手机号码\r\n     *\r\n     * @param {*} v 要匹配的内容\r\n     * @return {*}  {boolean} 返回一个布尔值\r\n     * @memberof CheckRegExp\r\n     * @example mobile(12345678) => return false\r\n     */\r\n    mobile(v) {\r\n        let reg = /^1[3|4|5|6|7|8|9][0-9]{9}$/;\r\n        return reg.test(v);\r\n    }\r\n    /**\r\n     *@description 匹配座机\r\n     *\r\n     * @param {*} v 要匹配的内容\r\n     * @return {*}  {boolean} 返回一个布尔值\r\n     * @memberof CheckRegExp\r\n     * @example telephone(\"1367894517\") => false\r\n     */\r\n    telephone(v) {\r\n        let reg = /^(0\\d{2,3}-\\d{7,8})(-\\d{1,4})?$/;\r\n        return reg.test(v);\r\n    }\r\n    /**\r\n     * @description 匹配密码 密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线\r\n     *\r\n     * @param {*} v 要匹配的内容\r\n     * @return {*}  {boolean} 返回一个布尔值\r\n     * @memberof CheckRegExp\r\n     * @example password(\"abc!@\") => false\r\n     */\r\n    password(v) {\r\n        let reg = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\r\n        return reg.test(v);\r\n    }\r\n    /**\r\n     * @description 匹配QQ号码\r\n     *\r\n     * @param {*} v 要匹配的内容\r\n     * @return {*}  {boolean} 返回一个布尔值\r\n     * @memberof CheckRegExp\r\n     * @example qq(\"12345\") => false\r\n     */\r\n    qq(v) {\r\n        let reg = /^[1-9][0-9]{4,9}$/;\r\n        return reg.test(v);\r\n    }\r\n    /**\r\n     * @description 匹配身份证号码\r\n     *\r\n     * @param {*} v 要匹配的内容\r\n     * @return {*}  {boolean} 返回一个布尔值\r\n     * @memberof CheckRegExp\r\n     * @example IDcard(\"2313213213\") => false\r\n     */\r\n    IDcard(v) {\r\n        let reg = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\r\n        return reg.test(v);\r\n    }\r\n    /**\r\n     * @description 匹配邮政编码\r\n     *\r\n     * @param {*} v 要匹配的内容\r\n     * @return {*}  {boolean} 返回一个布尔值\r\n     * @memberof CheckRegExp\r\n     * @example postal(\"511740\") => true\r\n     */\r\n    postal(v) {\r\n        let reg = /\\d{6}/;\r\n        return reg.test(v);\r\n    }\r\n    /**\r\n     * @description 匹配URL\r\n     *\r\n     * @param {*} v 要匹配的内容\r\n     * @return {*}  {boolean} 返回一个布尔值\r\n     * @memberof CheckRegExp\r\n     * @example url(\"http://127.0.0.1\") => true url(\"http://www.abc.com\") => true\r\n     */\r\n    url(v) {\r\n        let reg = /(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&:/~\\+#]*[\\w\\-\\@?^=%&/~\\+#])?/;\r\n        return reg.test(v);\r\n    }\r\n    /**\r\n     * @description 匹配IP\r\n     *\r\n     * @param {*} v 要匹配的内容\r\n     * @return {*}  {boolean} 返回一个布尔值\r\n     * @memberof CheckRegExp\r\n     * @example IPv4(\"127.0.0.1\") => true\r\n     */\r\n    IPv4(v) {\r\n        let reg = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\r\n        return reg.test(v);\r\n    }\r\n    /**\r\n     * @description 匹配数字\r\n     *\r\n     * @param {*} v 要匹配的内容\r\n     * @return {*}  {boolean} 返回一个布尔值\r\n     * @memberof CheckRegExp\r\n     * @example number(\"123\") => true number(\"s1\") => false\r\n     */\r\n    number(v) {\r\n        let reg = /^[0-9]$/;\r\n        return reg.test(v);\r\n    }\r\n    /**\r\n     * @description 匹配英文\r\n     *\r\n     * @param {*} v 要匹配的内容\r\n     * @return {*}  {boolean} 返回一个布尔值\r\n     * @memberof CheckRegExp\r\n     * @example en(\"cn\") => true\r\n     */\r\n    en(v) {\r\n        let reg = /^[a-zA-Z]+$/;\r\n        return reg.test(v);\r\n    }\r\n    /**\r\n     * @description 匹配中文\r\n     *\r\n     * @param {*} v 要匹配的内容\r\n     * @return {*}  {boolean} 返回一个布尔值\r\n     * @memberof CheckRegExp\r\n     * @example cn(\"中文\") => true  cn(\"cn\") => false\r\n     */\r\n    cn(v) {\r\n        let reg = /^[\\u4E00-\\u9FA5]+$/;\r\n        return reg.test(v);\r\n    }\r\n    /**\r\n     * @description 匹配HTML标签\r\n     *\r\n     * @param {*} v 要匹配的内容\r\n     * @return {*}  {boolean} 返回一个布尔值\r\n     * @memberof CheckRegExp\r\n     * @example html(\"<div></div>\") => true\r\n     */\r\n    html(v) {\r\n        let reg = /<(\"[^\"]*\"|'[^']*'|[^'\">])*>/;\r\n        return reg.test(v);\r\n    }\r\n    /**\r\n     * @description 匹配邮箱地址\r\n     *\r\n     * @param {*} v 要匹配的内容\r\n     * @return {*}  {boolean} 返回一个布尔值\r\n     * @memberof CheckRegExp\r\n     * @example email(\"1324568@qq.com\") => true\r\n     */\r\n    email(v) {\r\n        let reg = /^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/;\r\n        return reg.test(v);\r\n    }\r\n    /**\r\n     * @description 匹配账号合法\r\n     *\r\n     * @param {*} v 要匹配的内容\r\n     * @return {*}  {boolean} 返回一个布尔值\r\n     * @memberof CheckRegExp\r\n     * @example username(abc_132) => true\r\n     */\r\n    username(v) {\r\n        let reg = /^[a-zA-Z][a-zA-Z0-9_]{4,15}$/;\r\n        return reg.test(v);\r\n    }\r\n}\r\nconst check = CheckRegExp.getInstance();\r\nexport default check;\r\n","/**\r\n * @description 获取浏览器类型\r\n *\r\n * @return {*}  {browserType} | 'IE7'| 'IE8'| 'IE9'| 'IE10'| 'IE11'| 'Edge'| 'FireFox'| 'Opera'| 'Chrome'| 'Safari'| null\r\n * @example getBrowserType() => 'Chrome'\r\n */\r\nconst getBrowserType = () => {\r\n    let types = null;\r\n    let userAgentInfo = navigator.userAgent;\r\n    let isOpera = userAgentInfo.indexOf('Opera') > -1;\r\n    let isIE = userAgentInfo.indexOf('compatible') > -1 &&\r\n        userAgentInfo.indexOf('MSIE') > -1 &&\r\n        !isOpera;\r\n    let isIE11 = userAgentInfo.indexOf('Trident') > -1 &&\r\n        userAgentInfo.indexOf('rv:11.0') > -1;\r\n    let isEdge = userAgentInfo.indexOf('Edge') > -1 && !isIE;\r\n    let isFireFox = userAgentInfo.indexOf('Firefox') > -1;\r\n    let isSafari = userAgentInfo.indexOf('Safari') > -1 &&\r\n        userAgentInfo.indexOf('Chrome') === -1;\r\n    let isChrome = userAgentInfo.indexOf('Chrome') > -1 &&\r\n        userAgentInfo.indexOf('Safari') > -1;\r\n    if (isIE) {\r\n        let regIE = new RegExp('MSIE (\\\\d+\\\\.\\\\d+);');\r\n        regIE.test(userAgentInfo);\r\n        let version = parseFloat(RegExp['$1']);\r\n        if (version == 7)\r\n            types = 'IE7';\r\n        else if (version == 8)\r\n            types = 'IE8';\r\n        else if (version == 9)\r\n            types = 'IE9';\r\n        else if (version == 10)\r\n            types = 'IE10';\r\n        else\r\n            types = null;\r\n    }\r\n    if (isIE11)\r\n        types = 'IE11';\r\n    if (isEdge)\r\n        types = 'Edge';\r\n    if (isFireFox)\r\n        types = 'FireFox';\r\n    if (isOpera)\r\n        types = 'Opera';\r\n    if (isSafari)\r\n        types = 'Safari';\r\n    if (isChrome)\r\n        types = 'Chrome';\r\n    return types;\r\n};\r\nexport default getBrowserType;\r\n","/**\r\n * @description 判断数据类型\r\n *\r\n * @param {*} v 任意值\r\n * @param {Types} t 传入类型 'string'| 'number'| 'object'| 'function'| 'boolean'| 'undefined'| 'symbol'| 'bigint'\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example typeOf(true, \"boolean\") = true\r\n */\r\nconst typeOf = (v, t) => {\r\n    return typeof v === t;\r\n};\r\nexport default typeOf;\r\n","import typeOf from \"./typeOf\";\r\n/**\r\n * @description 是否基本数据类型\r\n * @param v any 任意类型\r\n * @return boolean 返回一个boolean值\r\n * @example isPrimitive(1) => true isPrimitive({}) => false\r\n */\r\nconst isPrimitive = (v) => {\r\n    return (typeOf(v, \"string\") ||\r\n        typeOf(v, \"number\") ||\r\n        typeOf(v, \"symbol\") ||\r\n        typeOf(v, \"boolean\"));\r\n};\r\nexport default isPrimitive;\r\n","import { hasOwnProperty } from './init';\r\nimport isPrimitive from './isPrimitive';\r\n/**\r\n * @description 判断属性是否存在\r\n *\r\n * @param {*} obj 任意类型, 不是obejct返回false\r\n * @param {(string|number)} v 需要查找的属性名\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example has({a:1}, \"a\") => true\r\n */\r\nconst has = (obj, v) => {\r\n    if (isPrimitive(obj))\r\n        return false;\r\n    return hasOwnProperty.call(obj, v);\r\n};\r\nexport default has;\r\n","import { toString } from './init';\r\n/**\r\n * @description 是否字符串\r\n *\r\n * @param {*} v 任意值\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example isString(\"12\") => true\r\n */\r\nconst isString = (v) => {\r\n    return toString.call(v) === '[object String]';\r\n};\r\nexport default isString;\r\n","import isObj from './isObj';\r\n/**\r\n * @description 返回object自身可枚举属性\r\n *\r\n * @param {*} obj 要返回可枚举属性的对象\r\n * @return {*}  {Array<string>} 返回一个给定对象自身的所有可枚举属性的数组\r\n * @example toKeys({a:1,b:2}) => [\"a\", \"b\"]\r\n */\r\nconst toKeys = (obj) => {\r\n    if (!isObj(obj))\r\n        return [];\r\n    let keys = [];\r\n    for (let key in obj) {\r\n        keys.push(key);\r\n    }\r\n    return keys;\r\n};\r\nexport default toKeys;\r\n","import isArray from './isArray';\r\nimport isString from './isString';\r\nimport isObj from './isObj';\r\nimport toKeys from './toKeys';\r\nimport has from './has';\r\nimport isPrimitive from './isPrimitive';\r\n/**\r\n * @description indexOf 从头到尾地检索 如果有返回索引值\r\n *\r\n * @param {(any[] | string)} data 需要查找的数组或者字符串\r\n * @param {any} ele 指定的值, 可以是数字,字符串,对象\r\n * @param {(number | undefined)} [fromIndex] 从指定位置开始查找 可选\r\n * @return {*}  {number} 返回第一次出现的索引, 如果没有找到, 则返回-1\r\n * @example indexOf([1,2,3], 1) => 0 indexOf([{c:1}, {a:1,b:2}], {a:1}) => -1 indexOf([[1], [2,3]], [2,3]) => 1\r\n */\r\nconst indexOf = (data, ele, fromIndex) => {\r\n    if (!isArray(data) && !isString(data))\r\n        return -1;\r\n    let len = data.length;\r\n    if (len === 0)\r\n        return -1;\r\n    let index = fromIndex || 0;\r\n    let i = Math.max(index >= 0 ? index : data.length - Math.abs(fromIndex), 0);\r\n    while (i < len) {\r\n        if (!isPrimitive(ele)) {\r\n            const keys = isObj(ele) ? toKeys(ele) : ele;\r\n            let sum = 0;\r\n            for (let key in ele) {\r\n                if (has(data[i], key) && data[i][key] === ele[key]) {\r\n                    sum++; //用计数的方式判断\r\n                }\r\n            }\r\n            if (sum === keys.length)\r\n                return i;\r\n        }\r\n        else {\r\n            if (data[i] === ele)\r\n                return i;\r\n        }\r\n        i++;\r\n    }\r\n    return -1;\r\n};\r\nexport default indexOf;\r\n","import isObj from './isObj';\r\nimport indexOf from './indexOf';\r\n/**\r\n * @description 判断一个数组里或者字符串是否包含一个指定的值\r\n *\r\n * @param {(any[] | string)} data 需要查找的数组或者字符串\r\n * @param {never} ele 指定的值, 可以是数字,字符串,对象\r\n * @param {(number | undefined)} [fromIndex] 从指定位置开始查找 可选\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example includes([1,2,3], 1) => true\r\n */\r\nconst includes = (data, ele, fromIndex) => {\r\n    let index = fromIndex || 0;\r\n    let i = Math.max(index >= 0 ? index : data.length - Math.abs(fromIndex), 0);\r\n    while (i < data.length) {\r\n        if (isObj(ele)) {\r\n            return indexOf(data, ele, fromIndex) !== -1;\r\n        }\r\n        else {\r\n            if ('' + data[i] === '' + ele) {\r\n                return true;\r\n            }\r\n        }\r\n        i++;\r\n    }\r\n    return false;\r\n};\r\nexport default includes;\r\n","/**\r\n * @description 是否Android\r\n *\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example isAndroid() => true|false\r\n */\r\nconst isAndroid = () => {\r\n    let userAgentInfo = navigator.userAgent;\r\n    if (userAgentInfo.indexOf('Android') > -1 ||\r\n        userAgentInfo.indexOf('Linux') > -1) {\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\nexport default isAndroid;\r\n","import { toString } from './init';\r\n/**\r\n * @description 是否boolean\r\n *\r\n * @param {*} v 任意值\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example isBool(true) => true\r\n */\r\nconst isBool = (v) => {\r\n    return toString.call(v) === '[object Boolean]';\r\n};\r\nexport default isBool;\r\n","import { toString } from './init';\r\n/**\r\n * @description 是否日期\r\n *\r\n * @param {*} v 任意值\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example isDate(\"123\") => false\r\n */\r\nconst isDate = (v) => {\r\n    return toString.call(v) === '[object Date]';\r\n};\r\nexport default isDate;\r\n","import { toString } from './init';\r\n/**\r\n * @description 是否函数\r\n *\r\n * @param {*} v 任意值\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example isFn(function(){}) => true\r\n */\r\nconst isFn = (v) => {\r\n    return toString.call(v) === '[object Function]';\r\n};\r\nexport default isFn;\r\n","/**\r\n * @description 是否IOS\r\n *\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example isIOS() => false|true\r\n */\r\nconst isIOS = () => {\r\n    let userAgentInfo = navigator.userAgent;\r\n    if (userAgentInfo.indexOf('iPhone') > -1) {\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\nexport default isIOS;\r\n","/**\r\n * @description 是否iPad\r\n *\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example isiPad() => true|false\r\n */\r\nconst isiPad = () => {\r\n    let userAgentInfo = navigator.userAgent;\r\n    if (userAgentInfo.indexOf('iPad') > -1) {\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\nexport default isiPad;\r\n","import { toString } from './init';\r\n/**\r\n * @description 是否Map\r\n *\r\n * @param {*} v 任意值\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example isMap(new Map()) => true\r\n */\r\nconst isMap = (v) => {\r\n    return toString.call(v) === '[object Map]';\r\n};\r\nexport default isMap;\r\n","import { toString } from './init';\r\n/**\r\n * @description 是否Null\r\n *\r\n * @param {*} v 任意值\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example isNull(null) => true\r\n */\r\nconst isNull = (v) => {\r\n    return toString.call(v) === '[object Null]';\r\n};\r\nexport default isNull;\r\n","import { toString } from './init';\r\n/**\r\n * @description 是否数字\r\n *\r\n * @param {*} v 任意值\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example isNumber(12) => true\r\n */\r\nconst isNumber = (v) => {\r\n    return toString.call(v) === '[object Number]';\r\n};\r\nexport default isNumber;\r\n","import isFn from './isFn';\r\n/**\r\n * @description 是否Promise\r\n *\r\n * @param {*} v 任意值\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example isPromise() => true|false\r\n */\r\nconst isPromise = (v) => {\r\n    return v && isFn(v.then);\r\n};\r\nexport default isPromise;\r\n","import { toString } from './init';\r\n/**\r\n * @description 是否Set\r\n *\r\n * @param {*} v 任意值\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example isSet() => true|false\r\n */\r\nconst isSet = (v) => {\r\n    return toString.call(v) === '[object Set]';\r\n};\r\nexport default isSet;\r\n","import { toString } from './init';\r\n/**\r\n * @description 是否Symbol\r\n *\r\n * @param {*} v 任意值\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example isSymbol() => false|true\r\n */\r\nconst isSymbol = (v) => {\r\n    return toString.call(v) === '[object Symbol]';\r\n};\r\nexport default isSymbol;\r\n","import { toString } from './init';\r\n/**\r\n * @description 是否 undefined\r\n *\r\n * @param {*} v 任意值\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example isUndefined(null) => false\r\n */\r\nconst isUndefined = (v) => {\r\n    return toString.call(v) === '[object Undefined]';\r\n};\r\nexport default isUndefined;\r\n","/**\r\n *@description 是否WPhone设备\r\n *\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example isWPhone() => false|true\r\n */\r\nconst isWPhone = () => {\r\n    let userAgentInfo = navigator.userAgent;\r\n    if (userAgentInfo.indexOf('Windows Phone') > -1) {\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\nexport default isWPhone;\r\n","/**\r\n * @description 对字符串左边去空格\r\n *\r\n * @param {string} str 传入一个字符串\r\n * @return {*}  {string} 返回一个左边没有空格的新的字符串\r\n * @example ltrim(\" abc \") => \"abc \"\r\n */\r\nconst ltrim = (str) => {\r\n    let reg = /^\\s*/;\r\n    return str.replace(reg, '');\r\n};\r\nexport default ltrim;\r\n","/**\r\n * @description 对字符串右边去空格\r\n *\r\n * @param {string} str 传入一个字符串\r\n * @return {*}  {string} 返回一个右边没有空格的新的字符串\r\n * @example rtrim(\" bac \") => \" bac\"\r\n */\r\nconst rtrim = (str) => {\r\n    let reg = /\\s*$/;\r\n    return str.replace(reg, '');\r\n};\r\nexport default rtrim;\r\n","/**\r\n * @description 对字符串两边去空格\r\n *\r\n * @param {string} str 需要去空格的字符串\r\n * @return {*}  {string} 返回没有空格的字符串\r\n * @example trim(\" bac \") => \"bac\"\r\n */\r\nconst trim = (str) => {\r\n    let reg = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\r\n    return str.replace(reg, '');\r\n};\r\nexport default trim;\r\n","/**\r\n * @description 生成简单随机数\r\n *\r\n * @param {number} [lower=0] 最小范围\r\n * @param {number} [upper=1] 最大范围\r\n * @return {*}  {number} 返回一个[lower, upper]之间的数字\r\n * @example random(0, 4) => 3\r\n */\r\nconst random = (lower = 0, upper = 1) => {\r\n    return Math.floor(Math.random() * (upper - lower)) + lower;\r\n};\r\nexport default random;\r\n","/**\r\n * @description 大写转换成小写\r\n *\r\n * @param {string} str 需要被转换的字符串\r\n * @return {*}  {string} 一个新的字符串, 转换为小写的字符串\r\n * @example toLowerCase(\"ABC\") => \"abc\"\r\n */\r\nconst toLowerCase = (str) => {\r\n    let _arr = str.split('');\r\n    let _ascii;\r\n    let _max = 'Z'.charCodeAt(0);\r\n    let _min = 'A'.charCodeAt(0);\r\n    for (let i = 0; i < _arr.length; i++) {\r\n        _ascii = _arr[i].charCodeAt(0);\r\n        if (_max >= _ascii && _min <= _ascii) {\r\n            _arr[i] = String.fromCharCode(_ascii + 32);\r\n        }\r\n    }\r\n    return _arr.join('');\r\n};\r\nexport default toLowerCase;\r\n","/**\r\n * @description 小写转换成大写\r\n *\r\n * @param {string} str 需要被转换的字符串\r\n * @return {*}  {string} 一个新的字符串, 转换为大写的字符串\r\n * @example toUpperCase(\"abc\") => \"ABC\"\r\n */\r\nconst toUpperCase = (str) => {\r\n    let _arr = str.split('');\r\n    let _ascii;\r\n    let _max = 'z'.charCodeAt(0);\r\n    let _min = 'a'.charCodeAt(0);\r\n    for (let i = 0; i < _arr.length; i++) {\r\n        _ascii = _arr[i].charCodeAt(0);\r\n        if (_max >= _ascii && _min <= _ascii) {\r\n            _arr[i] = String.fromCharCode(_ascii - 32);\r\n        }\r\n    }\r\n    return _arr.join('');\r\n};\r\nexport default toUpperCase;\r\n","/**\r\n * @description 是否PC端\r\n *\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example isPC() => true|false\r\n */\r\nconst isPC = () => {\r\n    let userAgentInfo = navigator.userAgent;\r\n    let Agents = [\r\n        'Android',\r\n        'iPhone',\r\n        'SymbianOS',\r\n        'Windows Phone',\r\n        'iPad',\r\n        'iPod',\r\n    ];\r\n    let flag = true;\r\n    for (let i = 0; i < Agents.length; i++) {\r\n        if (userAgentInfo.indexOf(Agents[i]) > 0) {\r\n            flag = false;\r\n            break;\r\n        }\r\n    }\r\n    return flag;\r\n};\r\nexport default isPC;\r\n","/**\r\n * @description 是否NaN\r\n *\r\n * @param {*} v 任意值\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example isNaN(NaN) => true\r\n */\r\nconst isNaN = (v) => {\r\n    return isNaN(v) && Number.isNaN(v);\r\n};\r\nexport default isNaN;\r\n","import toKeys from './toKeys';\r\nimport isObj from './isObj';\r\n/**\r\n * @description 将object对象转成url参数\r\n *\r\n * @param {*} obj 需要被转化Url参数的对象\r\n * @return {*}  {string} 返回一个不包含 ? 的Url参数的字符串\r\n * @example a=1&b=2&c=3\r\n */\r\nconst toParam = (obj) => {\r\n    if (!isObj(obj))\r\n        return '';\r\n    const keys = toKeys(obj);\r\n    let param = '';\r\n    keys.forEach((key, i) => {\r\n        if (i < keys.length - 1)\r\n            param += `${key}=${obj[key]}&`;\r\n        else\r\n            param += `${key}=${obj[key]}`;\r\n    });\r\n    return param;\r\n};\r\nexport default toParam;\r\n","import isObj from './isObj';\r\nimport isArray from './isArray';\r\nimport toKeys from './toKeys';\r\nimport isNull from './isNull';\r\nimport isUndefined from './isUndefined';\r\nimport isString from './isString';\r\n/**\r\n * @description 判断是否为空 {}|\"\"|[]|null|undefined\r\n *\r\n * @param {*} v 任意值\r\n * @return {*}  {boolean} 返回一个布尔值\r\n * @example empty(\"\") => true empty(null) => true empty(undefined) => true empty({}) => true empty([]) => true empty(0) => false\r\n */\r\nconst empty = (v) => {\r\n    if (isObj(v) || isArray(v))\r\n        return toKeys(v).length === 0;\r\n    if (isNull(v) || isUndefined(v))\r\n        return true;\r\n    if (isString(v))\r\n        return v === \"\";\r\n    return false;\r\n};\r\nexport default empty;\r\n","/**\r\n * @description 格式化类\r\n *\r\n * @class Format\r\n */\r\nclass Format {\r\n    constructor() { }\r\n    /**\r\n     * @description 获取实例\r\n     *\r\n     * @static\r\n     * @return {*}\r\n     * @memberof CheckRegExp\r\n     */\r\n    static getInstance() {\r\n        if (!this.$instance)\r\n            this.$instance = new Format();\r\n        return this.$instance;\r\n    }\r\n    /**\r\n     * @description 简单的日期格式化\r\n     *\r\n     * @param {Date} date Data 日期\r\n     * @param {string} [format=\"-\"] string 默认-\r\n     * @return {*}  {string} 返回格式化后的日期\r\n     * @example date(new Date()) => 2019-6-12 13:43:23\r\n     * @memberof Format\r\n     */\r\n    date(date, format = \"-\") {\r\n        let year = date.getFullYear();\r\n        let month = date.getMonth() + 1;\r\n        let day = date.getDate();\r\n        let hour = date.getHours();\r\n        let minute = date.getMinutes();\r\n        let second = date.getSeconds();\r\n        month = month < 10 ? ('0' + month) : month;\r\n        day = day < 10 ? ('0' + day) : day;\r\n        hour = hour < 10 ? ('0' + hour) : hour;\r\n        minute = minute < 10 ? ('0' + minute) : minute;\r\n        second = second < 10 ? ('0' + second) : second;\r\n        return year + format + month + format + day + ' ' + hour + ':' + minute + ':' + second;\r\n    }\r\n    /**\r\n     * @description 对金额进行千位分隔\r\n     *\r\n     * @param {string} str 需要格式化的金额\r\n     * @param {number} [radix] 如果有小数位 保留[radix]位数\r\n     * @return {*}  {string} 返回格式化后的金额\r\n     * @example money(\"1223547.68\") => 1,223,547.68\r\n     * @memberof Format\r\n     */\r\n    money(str, radix) {\r\n        let reg = /\\d{1,3}(?=(\\d{3})+$)/g;\r\n        let split = String(str).split(\".\");\r\n        let newStr = split[0].replace(reg, \"$&,\");\r\n        let digits = split[1] || \"\";\r\n        digits = digits.slice(0, radix ? radix : digits.length);\r\n        digits = digits ? \".\" + digits : \"\";\r\n        return `${newStr}${digits}`;\r\n    }\r\n}\r\nconst format = Format.getInstance();\r\nexport default format;\r\n","import typeOf from './typeOf';\r\nimport includes from './includes';\r\nimport trim from './trim';\r\nimport isArray from './isArray';\r\nimport isString from './isString';\r\nimport isNumber from './isNumber';\r\n/**\r\n * @description 对数组去重 只对string[]|number[]去重 不使用new Set()\r\n *\r\n * @param {(Array<string | number>)} arr 需要去重的数组\r\n * @return {*}  {(Array<string | number>)} 返回一个没有重复数据的数组\r\n * @example uniqueToArray([1,2,3,3,2]) => [1,2,3]\r\n */\r\nconst uniqueToArray = (arr) => {\r\n    arr = arr.filter(Boolean);\r\n    let newArr = [];\r\n    let obj = {};\r\n    for (let i = 0; i < arr.length; i++) {\r\n        if (!obj[arr[i]]) {\r\n            obj[arr[i]] = true;\r\n            newArr.push(arr[i]);\r\n        }\r\n    }\r\n    return newArr;\r\n};\r\n/**\r\n * @description 对多种类型或者混合数组去重\r\n *\r\n * @param {Array<any>} arr 需要去重的数组\r\n * @return {*}  {Array<any>} 返回一个没有重复数据的数组\r\n * @example  uniqueToSizzArray([{age:12},{age:13}]) uniqueToSizzArray([\"a\",\"b\",\"b\"])\r\n */\r\nconst uniqueToSizzArray = (arr) => {\r\n    arr = arr.filter(Boolean);\r\n    let newArr = [];\r\n    let newObjArr = [];\r\n    let obj = {};\r\n    for (let i = 0; i < arr.length; i++) {\r\n        let item = arr[i];\r\n        if (typeOf(item, \"object\")) {\r\n            if (!includes(newObjArr, item))\r\n                newObjArr.push(item);\r\n        }\r\n        else {\r\n            if (!obj[item]) {\r\n                obj[item] = true;\r\n                newArr.push(item);\r\n            }\r\n        }\r\n    }\r\n    return newArr.concat(newObjArr);\r\n};\r\n/**\r\n * @description 对字符串去重\r\n *\r\n * @param {string} str 需要去重的字符串\r\n * @return {*}  {string} 返回新的字符串\r\n * @example uniqueToSttring(\"abcbbbc\") => abc\r\n */\r\nconst uniqueToSttring = (str) => {\r\n    str = trim(str); //先对其去空格\r\n    let newStr = \"\";\r\n    let obj = {};\r\n    for (let i = 0; i < str.length; i++) {\r\n        if (!obj[str[i]]) {\r\n            newStr += str[i];\r\n            obj[str[i]] = true;\r\n        }\r\n    }\r\n    return newStr;\r\n};\r\n/**\r\n * @description 对数字去重\r\n *\r\n * @param {number} num 需要去重的数字\r\n * @return {*}  {number} 返回没有重复的数字\r\n * @example uniqueToNumber(111123) => 123\r\n */\r\nconst uniqueToNumber = (num) => {\r\n    let str = \"\" + num; //对数字转字符串\r\n    return Number(uniqueToSttring(str));\r\n};\r\n/**\r\n * @description 对一个集合去重\r\n *\r\n * @param {*} data 任意值\r\n * @return {*}  {*} 返回没有重复的数据\r\n * @example unique([1,2,3,3]) => [1,2,3] unique([{age:1}, {age:2}, {age:1}]) => [{age:1}, {age:2}]\r\n */\r\nconst unique = (data) => {\r\n    if (isArray(data))\r\n        return uniqueToSizzArray(data);\r\n    else if (isString(data))\r\n        return uniqueToSttring(data);\r\n    else if (isNumber(data))\r\n        return uniqueToNumber(data);\r\n    return null;\r\n};\r\nexport default unique;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(127);\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}